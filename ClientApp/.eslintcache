[{"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\registerServiceWorker.js":"1","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\About.tsx":"2","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\UtilitySection.tsx":"3","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\NavMenu.tsx":"4","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\ServerCard.tsx":"5","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\backend\\Error.ts":"6","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\CommandGroup.tsx":"7","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\ServerSettings.tsx":"8","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\backend\\Commands.ts":"9","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\backend\\ResponseGroup.ts":"10","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\Help.tsx":"11","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\App.tsx":"12","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\index.js":"13","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\backend\\User.ts":"14","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\Home.tsx":"15","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\backend\\Servers.ts":"16","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\Layout.tsx":"17"},{"size":4121,"mtime":1598469222881,"results":"18","hashOfConfig":"19"},{"size":1972,"mtime":1600890796604,"results":"20","hashOfConfig":"19"},{"size":4595,"mtime":1603836239563,"results":"21","hashOfConfig":"19"},{"size":5583,"mtime":1604939364792,"results":"22","hashOfConfig":"19"},{"size":928,"mtime":1600269338525,"results":"23","hashOfConfig":"19"},{"size":3144,"mtime":1605388995255,"results":"24","hashOfConfig":"19"},{"size":10403,"mtime":1606154285745,"results":"25","hashOfConfig":"19"},{"size":24582,"mtime":1606160745219,"results":"26","hashOfConfig":"19"},{"size":11532,"mtime":1606158663081,"results":"27","hashOfConfig":"19"},{"size":16432,"mtime":1606162189733,"results":"28","hashOfConfig":"19"},{"size":3722,"mtime":1603839512990,"results":"29","hashOfConfig":"19"},{"size":2428,"mtime":1608048446092,"results":"30","hashOfConfig":"19"},{"size":687,"mtime":1600708760419,"results":"31","hashOfConfig":"19"},{"size":1894,"mtime":1600126773741,"results":"32","hashOfConfig":"19"},{"size":2132,"mtime":1608048446107,"results":"33","hashOfConfig":"19"},{"size":7321,"mtime":1606159911678,"results":"34","hashOfConfig":"19"},{"size":667,"mtime":1603836239556,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"x0els6",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"70","usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\registerServiceWorker.js",[],["77","78"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\About.tsx",["79","80"],"﻿import React, { Component } from \"react\";\r\nimport \"../css/Home.css\";\r\n\r\nexport const AboutSection: React.FunctionComponent = () =>\r\n{\r\n    return (\r\n        <div className=\"textColor _aboutSection\">\r\n            <h3>About The Bot</h3>\r\n\r\n            <p className=\"_textIndent\">\r\n                Brokkoly Bot is a Discord bot made to make life slightly easier on your server. At its core it is a quote bot made for retrieval of random hot takes or memorable quotes from the server's past. Instead of finding a link that people ask for on a daily basis, just use !command and the bot will send the preset response with the link.\r\n            </p>\r\n            <p className=\"_textIndent\">\r\n                The bot is built in Python with a PostgreSQL backend. The hosting and automatic deployment is done on Heroku. Check out the bot's code <a href=\"https://github.com/Brokkoly/BrokkolyBot\">here.</a>\r\n            </p>\r\n            <h3>About This Website</h3>\r\n            <p className=\"_textIndent\">\r\n                This website came along because I needed a good way for users to see what commands the bot has for their server, and having users edit settings through a text interface is not a good experience.\r\n            </p>\r\n            <p className=\"_textIndent\">\r\n                This website's client is built using Typescript and React. The web server is built using Asp.Net Core, which provides the apis used by the client in addition to connecting to the same PostgreSQL database used by the bot. The website is hosted on Azure. Check out the website's code <a href=\"https://github.com/Brokkoly/BrokkolyBotFrontend\">here.</a>\r\n            </p>\r\n            <h3>Other Information</h3>\r\n            <p className=\"_textIndent\">\r\n                Having trouble with the bot or this website? Leave an issue on the appropriate github repository, or send me an email <a href=\"mailto:brokkolybot@gmail.com\">here.</a>\r\n            </p>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}",["81","82"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\UtilitySection.tsx",["83","84"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\NavMenu.tsx",["85","86"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\ServerCard.tsx",["87"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\backend\\Error.ts",["88"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\CommandGroup.tsx",["89","90","91","92","93","94"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\ServerSettings.tsx",["95","96","97","98","99","100"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\backend\\Commands.ts",["101"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\backend\\ResponseGroup.ts",["102"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\Help.tsx",["103","104"],"﻿import React, { Component } from \"react\";\r\n\r\n\r\nexport const HelpSection: React.FunctionComponent = () =>\r\n{\r\n    return (\r\n        <div className=\"textColor _aboutSection\">\r\n            <h3>Commands</h3>\r\n            <p className=\"_textIndent\">\r\n                Commands are the bread and butter of BrokkolyBot. Simply type !commandName and the bot will respond with a random message you've associated with commandName. Head over to \"My Servers\" to check out the existing commands on your servers. If a command has multiple messages associated with it, !commandName will retrieve a random message from the group.\r\n            </p>\r\n            <h3>!Help</h3>\r\n            <p className=\"_textIndent\">\r\n                !help will get you a dm from the bot, letting you know all of the commands as well as all of the commands the server has available.\r\n            </p>\r\n            <h3>!ExtractEmoji</h3>\r\n            <p className=\"_textIndent\">\r\n                !extractemoji will get the url to emojis in your message. You can also pass a link to a discord message and the bot will extract the emojis in that message. Finally you can get the images for emojis when on mobile.\r\n            </p>\r\n            <h3>Cooldowns</h3>\r\n            <p className=\"_textIndent\">\r\n                Managers can set a cooldown for the server. The bot can only respond to messages once per cooldown period.\r\n            </p>\r\n            <h3>Managers and Manager-Only Commands</h3>\r\n            <p className=\"_textIndent\">\r\n                If you have the Manage Guild permission on discord, or you have the bot's manager role on your server, you can add commands to the bot on the server or on this website. Managers can also use the manager-only commands listed below:\r\n            </p>\r\n            <h3>!twitchadd (Coming Soon)</h3>\r\n            <p className=\"_textIndent\">\r\n                Soon BrokkolyBot will be able to notify you when somebody goes live on twitch. You will be able to subscribe to streams, and you can even specify users in the server to associate with a stream. Then you can elevate them to a visible role indicating that they are live now!\r\n            </p>\r\n            <h3>!Add</h3>\r\n            <p className=\"_textIndent\">\r\n                !Add &lt;commandName&gt; &lt;Message&gt; will add a new response for commandName.\r\n                <br />\r\n                Restrictions:\r\n                <ul>\r\n                    <li>The commandName must be longer than 3 characters and cannot be longer than 20 characters. It can only contain letters.</li>\r\n                    <li>The commandName cannot be add, extractemoji, timeout, removetimeout or help</li>\r\n                    <li>The message cannot be empty and cannot be longer than 500 characters.</li>\r\n                    <li>The message cannot mention a user, a role, @everyone or @here.</li>\r\n                    <li>The message cannot be the same as an existing message associated with commandName.</li>\r\n                </ul>\r\n            </p>\r\n            <h3>!Timeout</h3>\r\n            <p className=\"_textIndent\">\r\n                !Timeout @User &lt;timeInSeconds&gt; will assign a role that prevents the user from sending messages in any channels for the provided time. After the time has elapsed, the bot will automatically remove the role. The bot will create a role for this purpose, using its nickname on the server (eg: \"BrokkolyBot's Timeout Role\"). This role's name can be modified freely.\r\n            </p>\r\n            <h3>!RemoveTimeout</h3>\r\n            <p className=\"_textIndent\">\r\n                !RemoveTimeout @User will remove the timeout role from a user before their sentence is up.\r\n            </p>\r\n        </div>\r\n    );\r\n}",["105","106"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\App.tsx",[],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\index.js",[],["107","108"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\backend\\User.ts",["109"],"﻿export interface IUser\r\n{\r\n    id: string;\r\n    username: string;\r\n    discriminator: string;\r\n    avatar: string;\r\n    verified: boolean;\r\n    flags: number;\r\n    premium_type: number;\r\n    public_flags: number;\r\n}\r\nexport interface IGuild\r\n{\r\n    id: string;\r\n    name: string;\r\n    icon: string;\r\n    owner: boolean;\r\n    permissions: number;\r\n    permissions_new: number;\r\n}\r\n\r\nexport class User\r\n{\r\n    public displayName: string = \"Not Logged In\";\r\n    public avatarUrl: string = \"\";\r\n    public accessToken: string = \"\";\r\n\r\n    constructor(accessToken: string, displayName: string, avatarUrl: string)\r\n    {\r\n        this.accessToken = accessToken;\r\n        this.displayName = displayName;\r\n        this.avatarUrl = avatarUrl;\r\n    }\r\n    public static async getUserFromToken(token: string): Promise<User>\r\n    {\r\n        if (token) {\r\n            const user = await User.getUserInfo(token);\r\n            return new User(token, User.getDisplayName(user), User.getAvatarUrl(user))\r\n        }\r\n        else {\r\n            return new User(\"\", \"\", \"\");\r\n        }\r\n    }\r\n    public static getDisplayName(user: IUser): string\r\n    {\r\n        return `${user.username}#${user.discriminator}`;\r\n    }\r\n    public static getAvatarUrl(user: IUser): string\r\n    {\r\n        return `https://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.${user.avatar.substr(0, 2) === \"a_\" ? \"gif\" : \"png\"}?size=128`;\r\n    }\r\n\r\n    public static async getUserInfo(token: string)\r\n    {\r\n        const response = fetch(`https://discord.com/api/users/@me`,\r\n            {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                    'content-type': 'application/json'\r\n                },\r\n\r\n            }\r\n        ).then(res =>\r\n        {\r\n            return res.json();\r\n        });\r\n        return response;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\Home.tsx",[],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\backend\\Servers.ts",["110"],"C:\\Users\\Brendan Krull\\source\\repos\\BrokkolyBotFrontend\\ClientApp\\src\\components\\Layout.tsx",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":1,"nodeType":"117","messageId":"118","fix":"119"},{"ruleId":"120","severity":1,"message":"121","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":26},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":1,"nodeType":"117","messageId":"118","fix":"124"},{"ruleId":"120","severity":1,"message":"125","line":20,"column":15,"nodeType":"122","messageId":"123","endLine":20,"endColumn":30},{"ruleId":"120","severity":1,"message":"126","line":20,"column":12,"nodeType":"122","messageId":"123","endLine":20,"endColumn":19},{"ruleId":"120","severity":1,"message":"127","line":20,"column":21,"nodeType":"122","messageId":"123","endLine":20,"endColumn":31},{"ruleId":"115","severity":1,"message":"116","line":1,"column":1,"nodeType":"117","messageId":"118","fix":"128"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":1,"nodeType":"117","messageId":"118","fix":"129"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":1,"nodeType":"117","messageId":"118","fix":"130"},{"ruleId":"120","severity":1,"message":"131","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":18},{"ruleId":"120","severity":1,"message":"132","line":3,"column":10,"nodeType":"122","messageId":"123","endLine":3,"endColumn":18},{"ruleId":"120","severity":1,"message":"133","line":3,"column":20,"nodeType":"122","messageId":"123","endLine":3,"endColumn":28},{"ruleId":"120","severity":1,"message":"134","line":6,"column":10,"nodeType":"122","messageId":"123","endLine":6,"endColumn":30},{"ruleId":"120","severity":1,"message":"135","line":6,"column":32,"nodeType":"122","messageId":"123","endLine":6,"endColumn":48},{"ruleId":"115","severity":1,"message":"116","line":1,"column":1,"nodeType":"117","messageId":"118","fix":"136"},{"ruleId":"120","severity":1,"message":"137","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":14},{"ruleId":"120","severity":1,"message":"138","line":4,"column":10,"nodeType":"122","messageId":"123","endLine":4,"endColumn":24},{"ruleId":"120","severity":1,"message":"139","line":13,"column":10,"nodeType":"122","messageId":"123","endLine":13,"endColumn":20},{"ruleId":"140","severity":1,"message":"141","line":90,"column":9,"nodeType":"142","endLine":90,"endColumn":55,"suggestions":"143"},{"ruleId":"120","severity":1,"message":"144","line":292,"column":14,"nodeType":"122","messageId":"123","endLine":292,"endColumn":38},{"ruleId":"115","severity":1,"message":"116","line":1,"column":1,"nodeType":"117","messageId":"118","fix":"145"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":1,"nodeType":"117","messageId":"118","fix":"146"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":1,"nodeType":"117","messageId":"118","fix":"147"},{"ruleId":"120","severity":1,"message":"121","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":26},{"ruleId":"111","replacedBy":"148"},{"ruleId":"113","replacedBy":"149"},{"ruleId":"111","replacedBy":"148"},{"ruleId":"113","replacedBy":"149"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":1,"nodeType":"117","messageId":"118","fix":"150"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":1,"nodeType":"117","messageId":"118","fix":"151"},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"154","text":"155"},"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar",{"range":"156","text":"155"},"'discordAuthLink' is assigned a value but never used.","'cookies' is assigned a value but never used.","'setCookies' is assigned a value but never used.",{"range":"157","text":"155"},{"range":"158","text":"155"},{"range":"159","text":"155"},"'useState' is defined but never used.","'Commands' is defined but never used.","'ICommand' is defined but never used.","'ICommandRowFunctions' is defined but never used.","'IExpandGroupArgs' is defined but never used.",{"range":"160","text":"155"},"'Next' is defined but never used.","'InputGroupText' is defined but never used.","'CommandRow' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'nextTempId'. Either include it or remove the dependency array. You can also do a functional update 'setNextTempId(n => ...)' if you only need 'nextTempId' in the 'setNextTempId' call.","ArrayExpression",["161"],"'sortListOfResponseGroups' is defined but never used.",{"range":"162","text":"155"},{"range":"163","text":"155"},{"range":"164","text":"155"},["152"],["153"],{"range":"165","text":"155"},{"range":"166","text":"155"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],{"desc":"167","fix":"168"},[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],"Update the dependencies array to be: [nextTempId, server.serverId, server.userCanManage, token]",{"range":"169","text":"170"},[3423,3469],"[nextTempId, server.serverId, server.userCanManage, token]"]